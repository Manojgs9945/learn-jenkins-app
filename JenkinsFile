pipeline {
    agent any
    environment{
        NETLIFY_SITE_ID = 'fb6ed9c8-960a-46ec-bf5c-9abc5b166757'
        NETLIFY_AUTH_TOKEN = credentials('netlify-token')
        REACT_APP_VERSION = "1.0.$BUILD_ID"
    }

    stages {
        stage('Docker'){
         steps{
          sh 'docker build -t my_play .'
         }
        }
        stage('build') {
            agent {
                docker{
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                echo 'Hello World'
                script {
                    env.MY_VAR1 = 'This is Variable1'
                    env.MY_VAR2 = sh(script: 'date', returnStdout: true)
                }
                sh '''
                   ls -la
                   node --version
                   npm --version
                   npm ci
                   npm run build
                   ls -la
                '''
            }
        }
        stage("all_test"){
            parallel{
                stage('unit_test'){
                    steps{
                        sh'''
                        test -f public/index.html
                        '''
                    }
                }
                stage('E2E'){
                    agent {
                        docker{
                            image 'my_play'
                            reuseNode true
                        }
                    }
                    steps{
                        sh '''
                        serve -s build &
                        sleep 20
                        npx playwright install
                        npx playwright test --reporter=html
                        '''
                    }
                    post{
                        always{
                                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'playwright HTML paralel', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }
                }
            }
        }
    }

}
